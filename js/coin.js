// js/coin.js ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –º–æ–Ω–µ—Ç—ã
document.addEventListener('DOMContentLoaded', () => {
  const langSelect = document.getElementById('langSelect');
  const flipBtn = document.getElementById('flipBtn');
  const resetBtn = document.getElementById('resetBtn');
  const resultText = document.getElementById('resultText');
  const footerText = document.getElementById('footerText'); // may be null
  const coin = document.getElementById('coin');
  const backBtn = document.getElementById('backBtn');

  const flipSound = document.getElementById('flipSound');
  const resultSound = document.getElementById('resultSound');

  if (!flipBtn || !resetBtn || !coin || !langSelect) {
    console.error('coin.js: required elements missing. Check IDs: flipBtn, resetBtn, coin, langSelect');
    return;
  }

  // –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
  let currentLang = localStorage.getItem('lang') || 'eng';
  const texts = {
    eng: { title: 'ü™ô Coin Flip', flip: 'Flip', reset: 'Reset', heads: 'Heads', tails: 'Tails', footer: 'Good luck!' },
    ua:  { title: '–ü—ñ–¥–∫–∏–Ω—å –º–æ–Ω–µ—Ç—É', flip: '–ü—ñ–¥–∫–∏–Ω—É—Ç–∏', reset: '–°–∫–∏–Ω—É—Ç–∏', heads: '–û—Ä–µ–ª', tails: '–†–µ—à–∫–∞', footer: '–£–¥–∞—á—ñ!' },
    ru:  { title: '–û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞', flip: '–ë—Ä–æ—Å–∏—Ç—å', reset: '–°–±—Ä–æ—Å–∏—Ç—å', heads: '–û—Ä—ë–ª', tails: '–†–µ—à–∫–∞', footer: '–£–¥–∞—á–∏!' },
    ja:  { title: '„Ç≥„Ç§„É≥„ÇíÊäï„Åí„Çã', flip: 'Êäï„Åí„Çã', reset: '„É™„Çª„ÉÉ„Éà', heads: 'Ë°®', tails: 'Ë£è', footer: 'È†ëÂºµ„Å£„Å¶!' }
  };

  function setLanguage(lang) {
    currentLang = texts[lang] ? lang : 'eng';
    localStorage.setItem('lang', currentLang);
    const t = texts[currentLang];
    const titleEl = document.getElementById('title');
    if (titleEl) titleEl.textContent = t.title;
    const flipText = document.getElementById('flipText');
    if (flipText) flipText.textContent = t.flip;
    const resetText = document.getElementById('resetText');
    if (resetText) resetText.textContent = t.reset;
    if (footerText) footerText.textContent = t.footer;
    if (langSelect) langSelect.value = currentLang;
  }
  setLanguage(currentLang);
  langSelect.addEventListener('change', (e) => setLanguage(e.target.value));

  // state
  let isFlipping = false;
  let totalDeg = 0; // –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö

  const normalize360 = (d) => ((d % 360) + 360) % 360;

  function safePlay(audioEl) {
    if (!audioEl) return;
    try { audioEl.currentTime = 0; audioEl.play().catch(()=>{}); } catch (e) {}
  }

  flipBtn.addEventListener('click', () => {
    if (isFlipping) return;
    isFlipping = true;

    // –æ—á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (resultText) resultText.textContent = '';

    // –∑–≤—É–∫ –≤—Ä–∞—â–µ–Ω–∏—è
    safePlay(flipSound);

    // —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const isHeads = Math.random() < 0.5;

    // —Ç–µ–∫—É—â–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (0..359)
    const currentModulo = normalize360(totalDeg);
    const desiredModulo = isHeads ? 0 : 180;
    const deltaModulo = (desiredModulo - currentModulo + 360) % 360;

    // —Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ (–¥–µ–ª–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    const extraFullTurns = Math.floor(Math.random() * 5) + 6; // 6..10 full turns
    const delta = extraFullTurns * 360 + deltaModulo;

    // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±–æ—Ä–æ—Ç–æ–≤ (–Ω–æ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö)
    const duration = Math.min(3600, 900 + Math.floor(extraFullTurns * 200) + Math.floor(Math.random() * 600));

    totalDeg += delta; // —Ü–µ–ª–µ–≤–æ–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π —É–≥–æ–ª –¥–ª—è transform

    // –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∏ —Ü–µ–ª–µ–≤–æ–π transform (—á–µ—Ä–µ–∑ RAF –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    coin.style.willChange = 'transform';
    coin.style.transition = `transform ${duration}ms cubic-bezier(.22,.9,.32,1)`;

    // force layout then run transform
    // (requestAnimationFrame –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É –ø—Ä–æ—á–∏—Ç–∫—É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∏–ª–µ–π)
    requestAnimationFrame(() => {
      coin.style.transform = `rotateY(${totalDeg}deg)`;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
    const onEnd = (e) => {
      if (e.propertyName !== 'transform') return;
      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º totalDeg, —á—Ç–æ–±—ã —á–∏—Å–ª–∞ –Ω–µ —Ä–æ—Å–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
      totalDeg = normalize360(totalDeg);

      // —Ç–æ–Ω–∫–∞—è "–∑–∞–∫—Ä—É—Ç–∫–∞/—É—Å–ø–æ–∫–æ–µ–Ω–∏–µ" ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π nudge (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      // —Ç—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—Å–∫–æ–∫, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ:
      // coin.style.transition = 'transform 300ms ease-out';
      // coin.style.transform = `rotateY(${totalDeg + 6}deg)`;
      // setTimeout(()=> coin.style.transform = `rotateY(${totalDeg}deg)`, 300);

      // –∑–≤—É–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Ç–µ–∫—Å—Ç
      safePlay(resultSound);
      if (resultText) {
        resultText.textContent = isHeads ? texts[currentLang].heads : texts[currentLang].tails;
        resultText.classList.add('pulse');
        setTimeout(() => resultText.classList.remove('pulse'), 600);
      }
      isFlipping = false;
      coin.removeEventListener('transitionend', onEnd);
    };

    coin.addEventListener('transitionend', onEnd);
  });

  // Reset: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –º–æ–Ω–µ—Ç—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
  resetBtn.addEventListener('click', () => {
    // –æ–±—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 0
    coin.style.transition = 'transform 400ms ease';
    totalDeg = 0;
    // –ø—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ RAF
    requestAnimationFrame(() => {
      coin.style.transform = 'rotateY(0deg)';
    });
    if (resultText) resultText.textContent = '';
    isFlipping = false;
  });

  // Back
  if (backBtn) {
    backBtn.addEventListener('click', () => {
      window.location.href = 'index.html';
    });
  }
});

document.addEventListener('DOMContentLoaded', () => {
  const canvas = document.getElementById('iconCanvas');
  const ctx = canvas.getContext('2d');

  // --- –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∫—Ä—É–≥ ---
  const gradient = ctx.createRadialGradient(32, 32, 5, 32, 32, 32);
  gradient.addColorStop(0, '#7c3aed'); // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  gradient.addColorStop(1, '#06b6d4'); // –≥–æ–ª—É–±–æ–π
  ctx.fillStyle = gradient;
  ctx.beginPath();
  ctx.arc(32, 32, 30, 0, Math.PI * 2);
  ctx.fill();

  // --- –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —ç–º–æ–¥–∂–∏ –º–æ–Ω–µ—Ç—ã –ø–æ–≤–µ—Ä—Ö ---
  ctx.font = '32px serif';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillStyle = '#ffffff';
  ctx.fillText('ü™ô', 32, 32);

  // --- –°–æ–∑–¥–∞—ë–º favicon ---
  const favicon = document.createElement('link');
  favicon.rel = 'icon';
  favicon.type = 'image/png';
  favicon.href = canvas.toDataURL('image/png');
  document.head.appendChild(favicon);
});