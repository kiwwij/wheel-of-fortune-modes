/* script.js ‚Äî Wheel of Fortune
   –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4 —è–∑—ã–∫–æ–≤ (eng, ua, ru, ja)
   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ localStorage
   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞ (—É–∫–∞–∑–∞—Ç–µ–ª—å —Å–≤–µ—Ä—Ö—É ‚ñº)
   –†–µ–∂–∏–º "–≤—ã–±—ã–≤–∞–Ω–∏—è" (—É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–∞–≤—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª)
   –ó–≤—É–∫–∏ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ canvas
   –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤
*/

/* –û–±—ë—Ä—Ç–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ */
(() => {

  // ---------- –ü–µ—Ä–µ–≤–æ–¥—ã ----------
  const translations = {
    eng: {
      title: "Wheel of Fortune",
      inputPlaceholder: "Enter an option...",
      addButton: "Add",
      spinButton: "Spin",
      resetButton: "Reset",
      removeAndContinue: "Remove & Continue",
      close: "Close",
      modalTitle: "",
      optionsCount: (n) => `${n} option${n !== 1 ? 's' : ''}`,
      tip: "",
      defaultOptions: ["Prize 1", "Prize 2", "Prize 3", "Prize 4", "Prize 5", "Prize 6"],
      modesButton: "Modes",
      modesTitle: "Choose Mode",
      modeRandom: "Random Number üé≤",
      modeCoin: "Heads or Tails ü™ô"
    },
    ua: {
      title: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏",
      inputPlaceholder: "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç...",
      addButton: "–î–æ–¥–∞—Ç–∏",
      spinButton: "–ö—Ä—É—Ç–∏—Ç–∏",
      resetButton: "–°–∫–∏–Ω—É—Ç–∏",
      removeAndContinue: "–í–∏–¥–∞–ª–∏—Ç–∏ & –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏",
      close: "–ó–∞–∫—Ä–∏—Ç–∏",
      resultTitle: "",
      optionsCount: (n) => `${n} –≤–∞—Ä—ñ–∞–Ω—Ç${n%10===1 && n%100!==11 ? '' : (n%10>=2 && n%10<=4 && !(n%100>=12 && n%100<=14) ? '–∏' : '—ñ–≤')}`,
      tip: "",
      defaultOptions: ["–ü—Ä–∏–∑ 1", "–ü—Ä–∏–∑ 2", "–ü—Ä–∏–∑ 3", "–ü—Ä–∏–∑ 4", "–ü—Ä–∏–∑ 5", "–ü—Ä–∏–∑ 6"],
      modesButton: "–†–µ–∂–∏–º–∏",
      modesTitle: "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º",
      modeRandom: "–í–∏–ø–∞–¥–∫–æ–≤–µ —á–∏—Å–ª–æ üé≤",
      modeCoin: "–û—Ä—ë–ª –∞–±–æ —Ä–µ—à–∫–∞ ü™ô"
    },
    ru: {
      title: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
      inputPlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç...",
      addButton: "–î–æ–±–∞–≤–∏—Ç—å",
      spinButton: "–ö—Ä—É—Ç–∏—Ç—å",
      resetButton: "–°–±—Ä–æ—Å",
      removeAndContinue: "–£–¥–∞–ª–∏—Ç—å & –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
      close: "–ó–∞–∫—Ä—ã—Ç—å",
      resultTitle: "",
      optionsCount: (n) => `${n} –≤–∞—Ä–∏–∞–Ω—Ç${n !== 1 ? '–æ–≤' : ''}`,
      tip: "",
      defaultOptions: ["–ü—Ä–∏–∑ 1", "–ü—Ä–∏–∑ 2", "–ü—Ä–∏–∑ 3", "–ü—Ä–∏–∑ 4", "–ü—Ä–∏–∑ 5", "–ü—Ä–∏–∑ 6"],
      modesButton: "–†–µ–∂–∏–º—ã",
      modesTitle: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º",
      modeRandom: "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ üé≤",
      modeCoin: "–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞ ü™ô"
    },
    ja: {
      title: "ÈÅãÂëΩ„ÅÆ„É´„Éº„É¨„ÉÉ„Éà",
      inputPlaceholder: "„Ç™„Éó„Ç∑„Éß„É≥„ÇíÂÖ•Âäõ...",
      addButton: "ËøΩÂä†",
      spinButton: "„Çπ„Éî„É≥",
      resetButton: "„É™„Çª„ÉÉ„Éà",
      removeAndContinue: "ÂâäÈô§„Åó„Å¶Á∂öË°å",
      close: "Èñâ„Åò„Çã",
      resultTitle: "",
      optionsCount: (n) => `${n} ÂÄã„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥`,
      tip: "",
      defaultOptions: ["Ë≥ûÂìÅ1", "Ë≥ûÂìÅ2", "Ë≥ûÂìÅ3", "Ë≥ûÂìÅ4", "Ë≥ûÂìÅ5", "Ë≥ûÂìÅ6"],
      modesButton: "„É¢„Éº„Éâ",
      modesTitle: "„É¢„Éº„Éâ„ÇíÈÅ∏Êäû",
      modeRandom: "„É©„É≥„ÉÄ„É†„Å™Êï∞Â≠ó üé≤",
      modeCoin: "Ë°®„ÅãË£è„Åã ü™ô"
    }
  };

  // ---------- DOM —ç–ª–µ–º–µ–Ω—Ç—ã ----------
  const canvas = document.getElementById('wheelCanvas');
  const ctx = canvas.getContext('2d');
  const wheelContainer = document.getElementById('wheelContainer');
  const addBtn = document.getElementById('addBtn');
  const optionInput = document.getElementById('optionInput');
  const optionsList = document.getElementById('optionsList');
  const spinBtn = document.getElementById('spinBtn');
  const resetBtn = document.getElementById('resetBtn');
  const overlay = document.getElementById('overlay');
  const modalResult = document.getElementById('modalResult');
  const removeContinueBtn = document.getElementById('removeContinue');
  const closeModalBtn = document.getElementById('closeModal');
  const langSelect = document.getElementById('langSelect');
  const titleEl = document.getElementById('title');
  const countChip = document.getElementById('countChip');
  const resultTitleEl = document.getElementById('resultTitle');
  const tipText = document.getElementById('tipText');

  // ---------- –ê—É–¥–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ) ----------
  const spinSound = new Audio('spin.mp3'); // –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  spinSound.loop = true;
  const resultSound = new Audio('result.mp3');

  // ---------- –ö–ª—é—á–∏ localStorage –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
  const LANG_KEY = 'wheel_lang_v1';
  const OPTIONS_KEY = 'wheel_options_v1';
  let currentLang = localStorage.getItem(LANG_KEY) || 'eng';
  let options = loadOptions() || translations[currentLang].defaultOptions.slice();
  let rotation = 0; // —É–≥–æ–ª, –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
  let isSpinning = false;
  let lastSelectedIndex = -1;

  // ---------- –ü–æ–¥–≥–æ–Ω–∫–∞ canvas –ø–æ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ----------
  function fitCanvas() {
    const rect = wheelContainer.getBoundingClientRect();
    const dpr = window.devicePixelRatio || 1;
    canvas.width = Math.floor(rect.width * dpr);
    canvas.height = Math.floor(rect.height * dpr);
    canvas.style.width = rect.width + 'px';
    canvas.style.height = rect.height + 'px';
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
    draw();
  }
  window.addEventListener('resize', fitCanvas);

  // ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ ----------
  function saveLanguage(lang) { localStorage.setItem(LANG_KEY, lang); }
  function saveOptions() { try { localStorage.setItem(OPTIONS_KEY, JSON.stringify(options)); } catch (e) {} }
  function loadOptions() {
    try {
      const raw = localStorage.getItem(OPTIONS_KEY);
      return raw ? JSON.parse(raw) : null;
    } catch (e) { return null; }
  }

  // ---------- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI) ----------
  function applyLanguage() {
    const t = translations[currentLang];
    // –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    if (titleEl) titleEl.textContent = t.title;
    if (optionInput) optionInput.placeholder = t.inputPlaceholder;
    if (addBtn) addBtn.textContent = t.addButton;
    if (spinBtn) spinBtn.textContent = t.spinButton;
    if (resetBtn) resetBtn.textContent = t.resetButton;
    if (removeContinueBtn) removeContinueBtn.textContent = t.removeAndContinue;
    if (closeModalBtn) closeModalBtn.textContent = t.close;
    if (resultTitleEl) resultTitleEl.textContent = t.resultTitle;
    if (countChip) countChip.textContent = t.optionsCount(options.length);
    if (tipText) tipText.textContent = t.tip;

    // –æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Ä–µ–∂–∏–º–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const modesBtn = document.getElementById('modesBtn');
    const modesTitle = document.getElementById('modesTitle');
    const modeButtons = document.querySelectorAll('#modesOverlay .modal-actions button');
    if (modesBtn) modesBtn.textContent = t.modesButton;
    if (modesTitle) modesTitle.textContent = t.modesTitle;
    if (modeButtons.length >= 3) {
      modeButtons[0].textContent = t.modeRandom;
      modeButtons[1].textContent = t.modeCoin;
      modeButtons[2].textContent = t.close;
    }

    if (langSelect) langSelect.value = currentLang;
  }

  // ---------- –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–æ–ª–µ—Å–∞ ----------
  function draw() {
    const w = canvas.clientWidth;
    const h = canvas.clientHeight;
    if (w === 0 || h === 0) return;
    ctx.clearRect(0, 0, w, h);
    const cx = w / 2;
    const cy = h / 2;
    const r = Math.min(cx, cy) - 4;
    const n = Math.max(1, options.length);
    const sector = (Math.PI * 2) / n;

    // —Å–µ–∫—Ç–æ—Ä–∞
    for (let i = 0; i < n; i++) {
      const start = -Math.PI / 2 + i * sector + rotation;
      const end = start + sector;
      const hue = (i * (360 / n)) % 360;

      ctx.beginPath();
      ctx.moveTo(cx, cy);
      ctx.arc(cx, cy, r, start, end, false);
      ctx.closePath();
      ctx.fillStyle = `hsl(${hue} 78% 52%)`;
      ctx.fill();
      ctx.lineWidth = 1;
      ctx.strokeStyle = 'rgba(0,0,0,0.22)';
      ctx.stroke();

      // —Ç–µ–∫—Å—Ç –≤ —Å–µ–∫—Ç–æ—Ä–µ (–ø–µ—Ä–µ–Ω–æ—Å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
      ctx.save();
      ctx.translate(cx, cy);
      const angle = start + sector / 2;
      ctx.rotate(angle);
      ctx.textAlign = 'right';
      ctx.fillStyle = 'rgba(255,255,255,0.95)';
      ctx.font = 'bold 14px Inter, Arial, sans-serif';
      drawWrappedText(ctx, options[i] || '', r - 14);
      ctx.restore();
    }

    // –≤–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
    ctx.beginPath();
    ctx.arc(cx, cy, r + 6, 0, Math.PI * 2);
    ctx.lineWidth = 6;
    ctx.strokeStyle = 'rgba(255,255,255,0.04)';
    ctx.stroke();
  }

  // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–¥–æ–ª—å —Ä–∞–¥–∏—É—Å–∞
  function drawWrappedText(ctx, text, radius) {
    const maxWidth = radius - 8;
    const words = String(text).split(/\s+/).reverse();
    let line = '';
    const lines = [];
    while (words.length) {
      const w = words.pop();
      const test = line ? (line + ' ' + w) : w;
      const m = ctx.measureText(test).width;
      if (m > maxWidth && line) {
        lines.push(line);
        line = w;
      } else {
        line = test;
      }
    }
    if (line) lines.push(line);
    const maxLines = 3;
    const startY = -((lines.length - 1) * 12) - 6;
    for (let i = 0; i < Math.min(lines.length, maxLines); i++) {
      ctx.fillText(lines[i], radius - 10, startY + i * 18);
    }
  }

  // ---------- UI: —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π ----------
  function refreshList() {
    optionsList.innerHTML = '';
    options.forEach((opt, idx) => {
      const row = document.createElement('div');
      row.className = 'item';
      const label = document.createElement('div');
      label.className = 'label';
      label.textContent = opt;
      const del = document.createElement('button');
      del.className = 'btn';
      del.textContent = '‚úï';
      del.title = 'Remove';
      del.style.background = 'transparent';
      // —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      del.addEventListener('click', () => {
        options.splice(idx, 1);
        saveOptions();
        applyLanguage(); // –æ–±–Ω–æ–≤–ª—è–µ—Ç countChip
        refreshList();
        draw();
      });
      row.appendChild(label);
      row.appendChild(del);
      optionsList.appendChild(row);
    });
    countChip.textContent = translations[currentLang].optionsCount(options.length);
  }

  // ---------- –ü–æ–∏—Å–∫ —Å–µ–∫—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º (–≤–≤–µ—Ä—Ö—É) ----------
  function getSectorIndexAtPointer(rot) {
    const n = Math.max(1, options.length);
    const sector = (Math.PI * 2) / n;
    const pointerAngle = -Math.PI / 2; // —É–∫–∞–∑–∞—Ç–µ–ª—å —Å–≤–µ—Ä—Ö—É
    let best = 0;
    let bestDiff = Infinity;
    for (let i = 0; i < n; i++) {
      let center = -Math.PI / 2 + (i + 0.5) * sector + rot;
      center = normalizeAngle(center);
      const p = normalizeAngle(pointerAngle);
      let diff = Math.abs(center - p);
      if (diff > Math.PI) diff = 2 * Math.PI - diff;
      if (diff < bestDiff) { bestDiff = diff; best = i; }
    }
    return best;
  }
  function normalizeAngle(a) {
    a = (a + Math.PI) % (2 * Math.PI);
    if (a < 0) a += 2 * Math.PI;
    return a - Math.PI;
  }

  // ---------- –í—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞ (–∞–Ω–∏–º–∞—Ü–∏—è + –∑–≤—É–∫) ----------
  function spin() {
    if (isSpinning || options.length === 0) return;
    isSpinning = true;
    spinBtn.disabled = true;

    // –∑–∞–ø—É—Å–∫ –∑–≤—É–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    spinSound.currentTime = 0;
    spinSound.play().catch(() => {});

    const n = options.length;
    const sector = (Math.PI * 2) / n;
    const targetIndex = Math.floor(Math.random() * n);
    const f0 = - (targetIndex + 0.5) * sector;
    const extraRot = Math.floor(Math.random() * 4) + 4; // 4..7 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä—É–≥–æ–≤
    const kBase = Math.ceil((rotation - f0) / (2 * Math.PI));
    const k = kBase + extraRot;
    const endRotation = f0 + k * (2 * Math.PI);

    const startRotation = rotation;
    const duration = 4500 + Math.floor(Math.random() * 800);
    const startTime = performance.now();

    function easeOutCubic(t) { return 1 - Math.pow(1 - t, 3); }

    function frame(now) {
      const elapsed = now - startTime;
      const t = Math.min(1, elapsed / duration);
      const eased = easeOutCubic(t);
      rotation = startRotation + (endRotation - startRotation) * eased;
      draw();
      if (t < 1) {
        requestAnimationFrame(frame);
      } else {
        isSpinning = false;
        spinBtn.disabled = false;
        // –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è
        spinSound.pause();
        spinSound.currentTime = 0;

        // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –∏ –≤—ã—á–∏—Å–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä
        rotation = rotation % (2 * Math.PI);
        const selected = getSectorIndexAtPointer(rotation);
        lastSelectedIndex = selected;

        // –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        resultSound.currentTime = 0;
        resultSound.play().catch(() => {});
        showResult(selected);
      }
    }
    requestAnimationFrame(frame);
  }

  // ---------- –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ ----------
  function showResult(index) {
    modalResult.textContent = options[index] ?? '‚Äî';
    overlay.classList.remove('hidden');
    overlay.setAttribute('aria-hidden', 'false');
  }
  function closeModal() {
    overlay.classList.add('hidden');
    overlay.setAttribute('aria-hidden', 'true');
  }

  // ---------- –°–æ–±—ã—Ç–∏—è UI ----------
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  addBtn.addEventListener('click', () => {
    const v = optionInput.value.trim();
    if (!v) return;
    options.push(v);
    optionInput.value = '';
    saveOptions();
    refreshList();
    draw();
  });
  // Enter –≤ –∏–Ω–ø—É—Ç–µ = –¥–æ–±–∞–≤–∏—Ç—å
  optionInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') addBtn.click(); });

  // –ö–Ω–æ–ø–∫–∞ "–ö—Ä—É—Ç–∏—Ç—å"
  spinBtn.addEventListener('click', spin);

  // –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  resetBtn.addEventListener('click', () => {
    options = translations[currentLang].defaultOptions.slice();
    rotation = 0;
    saveOptions();
    refreshList();
    draw();
  });

  // –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–∞–≤—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
  removeContinueBtn.addEventListener('click', () => {
    if (lastSelectedIndex >= 0 && lastSelectedIndex < options.length) {
      options.splice(lastSelectedIndex, 1);
      saveOptions();
      lastSelectedIndex = -1;
      refreshList();
      draw();
      closeModal();
    } else {
      closeModal();
    }
  });

  // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª
  closeModalBtn.addEventListener('click', closeModal);
  overlay.addEventListener('click', (e) => { if (e.target === overlay) closeModal(); });

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
  langSelect.addEventListener('change', (e) => {
    currentLang = e.target.value;
    saveLanguage(currentLang);
    applyLanguage();
    // –µ—Å–ª–∏ –æ–ø—Ü–∏–π –≤ localStorage –Ω–µ—Ç ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    if (!localStorage.getItem(OPTIONS_KEY)) {
      options = translations[currentLang].defaultOptions.slice();
      saveOptions();
    }
    refreshList();
    draw();
  });

  // –ö–ª–∏–∫ –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é —Ç–æ–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Ä–∞—â–µ–Ω–∏–µ
  const pointerEl = document.querySelector('.pointer');
  if (pointerEl) pointerEl.addEventListener('click', spin);

  // –ü—Ä–æ–±–µ–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–∏–Ω, –Ω–æ –ù–ï –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –≤ input/textarea
  document.addEventListener('keydown', (e) => {
    const activeEl = document.activeElement;
    const ignoreTags = ['INPUT', 'TEXTAREA'];
    if (ignoreTags.includes(activeEl.tagName)) return; // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤–≤–æ–¥
    if (e.code === 'Space') {
      e.preventDefault();
      spin();
    }
  });

  // ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------
  function init() {
    langSelect.value = currentLang;
    applyLanguage();
    refreshList();
    fitCanvas();
    // –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
    requestAnimationFrame(draw);
  }
  init();

})(); // –∫–æ–Ω–µ—Ü IIFE

// ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–≤–∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ canvas ----------
function createFavicon() {
  const canvas = document.createElement('canvas');
  canvas.width = 64;
  canvas.height = 64;
  const ctx = canvas.getContext('2d');

  const cx = 32;
  const cy = 32;
  const r = 30;
  const segments = 8;

  // –†–∏—Å—É–µ–º —Ä–∞–¥—É–∂–Ω–æ–µ –∫–æ–ª–µ—Å–æ –≤ –º–∏–Ω–∏–∞—Ç—é—Ä–µ
  for (let i = 0; i < segments; i++) {
    const start = (i * 2 * Math.PI) / segments;
    const end = ((i + 1) * 2 * Math.PI) / segments;
    const hue = (i * 360 / segments) % 360;
    ctx.beginPath();
    ctx.moveTo(cx, cy);
    ctx.arc(cx, cy, r, start, end);
    ctx.closePath();
    ctx.fillStyle = `hsl(${hue}, 80%, 55%)`;
    ctx.fill();
  }

  // –ë–ª–µ—Å—Ç—è—â–∞—è —Ç–æ—á–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ
  const grad = ctx.createRadialGradient(cx, cy, 0, cx, cy, 10);
  grad.addColorStop(0, 'rgba(255,255,255,1)');
  grad.addColorStop(1, 'rgba(255,255,255,0)');
  ctx.fillStyle = grad;
  ctx.beginPath();
  ctx.arc(cx, cy, 10, 0, 2 * Math.PI);
  ctx.fill();

  // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º <link rel="icon">
  const faviconURL = canvas.toDataURL('image/png');
  let link = document.querySelector("link[rel*='icon']");
  if (!link) {
    link = document.createElement('link');
    link.rel = 'icon';
    document.head.appendChild(link);
  }
  link.type = 'image/png';
  link.href = faviconURL;
}
window.addEventListener('load', createFavicon);

// ---------- –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ ----------
const modesBtn = document.getElementById('modesBtn');
const modesOverlay = document.getElementById('modesOverlay');
const closeModesBtn = document.getElementById('closeModes');

if (modesBtn && modesOverlay) {
  modesBtn.addEventListener('click', () => {
    modesOverlay.classList.remove('hidden');
    modesOverlay.setAttribute('aria-hidden', 'false');
  });
}
if (closeModesBtn && modesOverlay) {
  closeModesBtn.addEventListener('click', () => {
    modesOverlay.classList.add('hidden');
    modesOverlay.setAttribute('aria-hidden', 'true');
  });
  // –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–∫–æ–º –ø–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—é
  modesOverlay.addEventListener('click', (e) => {
    if (e.target === modesOverlay) {
      modesOverlay.classList.add('hidden');
      modesOverlay.setAttribute('aria-hidden', 'true');
    }
  });
}